Для безнала

В конфигурации можно активировать учет бюджета и указать с какого числа он начинается (отедельно для нала и безнала)
Это сохраняется в настройках: ведется учет бюджета или нет,  с какого числа, сколько составляет бюджет на месяц, переносится ли остаток на следующий месяц.  Часть настроек не доступны для редактирования,  для них в справке должно указываться,  где их можно измерять
После этого при активации должен быть произведен расчет остатков на текущее время с указанной даты
Это значение сохраняется в базе таким образом: месяц - остаток на конец месяца
Далее при вводе нового счета его сумма вычитается из остатка и новое значение сохраняется в базе. Причём используется остаток того месяца, на который попадает счёт. Если идёт превышение бюджета - выдаётся предупреждение
Для каждого счёта есть дата его бюджета,  которая сохраняется в его модели
При редактировании счёта - удалении/добавлении актива - сумма пересчитывается

Для нала

Почти тоже самое, но при его вводе дата бюджета автоматом не ставится
В настройках есть дата,  когда можно начинать предлагать закрытие бюджета
Начиная с этой даты или когда сумма незакрытых чеокв превышает бюджет - появляется предложение закрыть бюджет.  Если закрывают,  то вводятся все не приписанные чеки, которые старше даты. Выбирая их автоматически подсчитывается трата за месяц
Чеки и их суммы хранятся в отдельной БД
При редактировании чека - удалении/добавлении актива - сумма пересчитывается

В общем

Надо сделать прослойку для работы с БД sqlite так, чтобы работа с объектами БД была в одном модуле, а слой, обеспечивающий эту работу - был в другом. Что-то вроде работы с моделями в django. Нужны модели МЕСЯЦ (доступ к нал/безнал), ЧЕК (сумма)

Порядок реализации:

1) Прослойка для работы с БД как с моделями
2) Страница конфигурации и изменение настройки
3) Расчёт бюджета при активации настройки / сброс при снятии
3,2) вывод остатков бюджета чезер API
3,5) изменение модели cash & cashless
4) Изменение функций работы со счетами
5) Изменение функции работы с чеками
6) закрытие бюджета по чекам

Реализация слоя работы с бд

Должен быть определен класс подключения к бд,  родительский класс для классов моделей
Класс подключения реализует подключение, выполнение запросов,  выдачу результатов
Родительский класс модели должен реализовывать конструктор
Должны быть реализованы классы определения полей модели

Как эти классы работают? 

При вызове метода создания таблицы происходит интроспекция и определяются все указанные поля для модели. Для каждого Россия взрывается его его метод создания поля,  который выдает часть SQL выражения.  После этого валяется результирующее выражение, создающее нужную таблицу. Это все методы класс,  которые не требуют наличия экземпляра 
Конструктор класса создает запрос для добавления строки в таблицу,  определится все обязательные поля
Кроме того конструктор создает класс для поля, который позволяет делать запрос на основании этого поля: get all filter orde
Аналогично происходит выполнение запросов к бд

Реализация на ZODB не рассматривалась, так как не входит в стандартную поставку Python

sqlite_models\bd_connector.py - определяет класс Selecter, который выполняет подлкючение к БД и запросы на ввод/вывод
sqlite_models\models.py - определяет класс, родительский для создания собственных моделей